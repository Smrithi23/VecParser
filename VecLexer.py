# Generated from Vec.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,39,289,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,1,0,1,0,1,0,1,0,3,0,86,8,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,
        10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,
        13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,
        17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,
        23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,
        28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,
        34,1,35,4,35,258,8,35,11,35,12,35,259,1,36,1,36,5,36,264,8,36,10,
        36,12,36,267,9,36,1,37,1,37,1,37,5,37,272,8,37,10,37,12,37,275,9,
        37,1,37,1,37,1,38,1,38,1,38,1,38,3,38,283,8,38,1,39,4,39,286,8,39,
        11,39,12,39,287,1,273,0,40,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,0,79,39,1,0,4,1,
        0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,
        9,10,13,13,32,32,294,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
        0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
        0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
        0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
        0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
        0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,
        0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,
        0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,79,1,0,
        0,0,1,85,1,0,0,0,3,87,1,0,0,0,5,90,1,0,0,0,7,94,1,0,0,0,9,110,1,
        0,0,0,11,127,1,0,0,0,13,143,1,0,0,0,15,157,1,0,0,0,17,175,1,0,0,
        0,19,186,1,0,0,0,21,189,1,0,0,0,23,193,1,0,0,0,25,199,1,0,0,0,27,
        202,1,0,0,0,29,205,1,0,0,0,31,211,1,0,0,0,33,213,1,0,0,0,35,215,
        1,0,0,0,37,217,1,0,0,0,39,219,1,0,0,0,41,221,1,0,0,0,43,223,1,0,
        0,0,45,225,1,0,0,0,47,228,1,0,0,0,49,231,1,0,0,0,51,233,1,0,0,0,
        53,235,1,0,0,0,55,238,1,0,0,0,57,241,1,0,0,0,59,244,1,0,0,0,61,246,
        1,0,0,0,63,248,1,0,0,0,65,250,1,0,0,0,67,252,1,0,0,0,69,254,1,0,
        0,0,71,257,1,0,0,0,73,261,1,0,0,0,75,268,1,0,0,0,77,282,1,0,0,0,
        79,285,1,0,0,0,81,82,5,43,0,0,82,86,5,43,0,0,83,84,5,45,0,0,84,86,
        5,45,0,0,85,81,1,0,0,0,85,83,1,0,0,0,86,2,1,0,0,0,87,88,5,38,0,0,
        88,89,5,38,0,0,89,4,1,0,0,0,90,91,5,97,0,0,91,92,5,110,0,0,92,93,
        5,100,0,0,93,6,1,0,0,0,94,95,5,115,0,0,95,96,5,105,0,0,96,97,5,109,
        0,0,97,98,5,100,0,0,98,99,5,68,0,0,99,100,5,111,0,0,100,101,5,117,
        0,0,101,102,5,98,0,0,102,103,5,108,0,0,103,104,5,101,0,0,104,105,
        5,70,0,0,105,106,5,109,0,0,106,107,5,97,0,0,107,108,5,100,0,0,108,
        109,5,100,0,0,109,8,1,0,0,0,110,111,5,109,0,0,111,112,5,97,0,0,112,
        113,5,116,0,0,113,114,5,109,0,0,114,115,5,117,0,0,115,116,5,108,
        0,0,116,117,5,75,0,0,117,118,5,101,0,0,118,119,5,114,0,0,119,120,
        5,110,0,0,120,121,5,101,0,0,121,122,5,108,0,0,122,123,5,56,0,0,123,
        124,5,120,0,0,124,125,5,49,0,0,125,126,5,54,0,0,126,10,1,0,0,0,127,
        128,5,109,0,0,128,129,5,97,0,0,129,130,5,116,0,0,130,131,5,109,0,
        0,131,132,5,117,0,0,132,133,5,108,0,0,133,134,5,75,0,0,134,135,5,
        101,0,0,135,136,5,114,0,0,136,137,5,110,0,0,137,138,5,101,0,0,138,
        139,5,108,0,0,139,140,5,50,0,0,140,141,5,120,0,0,141,142,5,56,0,
        0,142,12,1,0,0,0,143,144,5,103,0,0,144,145,5,111,0,0,145,146,5,116,
        0,0,146,147,5,111,0,0,147,148,5,75,0,0,148,149,5,101,0,0,149,150,
        5,114,0,0,150,151,5,110,0,0,151,152,5,101,0,0,152,153,5,108,0,0,
        153,154,5,56,0,0,154,155,5,120,0,0,155,156,5,56,0,0,156,14,1,0,0,
        0,157,158,5,109,0,0,158,159,5,97,0,0,159,160,5,116,0,0,160,161,5,
        109,0,0,161,162,5,117,0,0,162,163,5,108,0,0,163,164,5,75,0,0,164,
        165,5,101,0,0,165,166,5,114,0,0,166,167,5,110,0,0,167,168,5,101,
        0,0,168,169,5,108,0,0,169,170,5,49,0,0,170,171,5,68,0,0,171,172,
        5,50,0,0,172,173,5,120,0,0,173,174,5,56,0,0,174,16,1,0,0,0,175,176,
        5,99,0,0,176,177,5,111,0,0,177,178,5,110,0,0,178,179,5,118,0,0,179,
        180,5,75,0,0,180,181,5,101,0,0,181,182,5,114,0,0,182,183,5,110,0,
        0,183,184,5,101,0,0,184,185,5,108,0,0,185,18,1,0,0,0,186,187,5,105,
        0,0,187,188,5,102,0,0,188,20,1,0,0,0,189,190,5,102,0,0,190,191,5,
        111,0,0,191,192,5,114,0,0,192,22,1,0,0,0,193,194,5,119,0,0,194,195,
        5,104,0,0,195,196,5,101,0,0,196,197,5,114,0,0,197,198,5,101,0,0,
        198,24,1,0,0,0,199,200,5,105,0,0,200,201,5,110,0,0,201,26,1,0,0,
        0,202,203,5,46,0,0,203,204,5,46,0,0,204,28,1,0,0,0,205,206,5,118,
        0,0,206,207,5,97,0,0,207,208,5,114,0,0,208,209,1,0,0,0,209,210,3,
        79,39,0,210,30,1,0,0,0,211,212,5,40,0,0,212,32,1,0,0,0,213,214,5,
        41,0,0,214,34,1,0,0,0,215,216,5,123,0,0,216,36,1,0,0,0,217,218,5,
        125,0,0,218,38,1,0,0,0,219,220,5,91,0,0,220,40,1,0,0,0,221,222,5,
        93,0,0,222,42,1,0,0,0,223,224,5,44,0,0,224,44,1,0,0,0,225,226,5,
        60,0,0,226,227,5,61,0,0,227,46,1,0,0,0,228,229,5,62,0,0,229,230,
        5,61,0,0,230,48,1,0,0,0,231,232,5,60,0,0,232,50,1,0,0,0,233,234,
        5,62,0,0,234,52,1,0,0,0,235,236,5,43,0,0,236,237,5,61,0,0,237,54,
        1,0,0,0,238,239,5,45,0,0,239,240,5,61,0,0,240,56,1,0,0,0,241,242,
        5,42,0,0,242,243,5,61,0,0,243,58,1,0,0,0,244,245,5,43,0,0,245,60,
        1,0,0,0,246,247,5,45,0,0,247,62,1,0,0,0,248,249,5,42,0,0,249,64,
        1,0,0,0,250,251,5,37,0,0,251,66,1,0,0,0,252,253,5,61,0,0,253,68,
        1,0,0,0,254,255,5,59,0,0,255,70,1,0,0,0,256,258,7,0,0,0,257,256,
        1,0,0,0,258,259,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,72,1,
        0,0,0,261,265,7,1,0,0,262,264,7,2,0,0,263,262,1,0,0,0,264,267,1,
        0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,74,1,0,0,0,267,265,1,0,
        0,0,268,273,5,34,0,0,269,272,3,77,38,0,270,272,9,0,0,0,271,269,1,
        0,0,0,271,270,1,0,0,0,272,275,1,0,0,0,273,274,1,0,0,0,273,271,1,
        0,0,0,274,276,1,0,0,0,275,273,1,0,0,0,276,277,5,34,0,0,277,76,1,
        0,0,0,278,279,5,92,0,0,279,283,5,34,0,0,280,281,5,92,0,0,281,283,
        5,92,0,0,282,278,1,0,0,0,282,280,1,0,0,0,283,78,1,0,0,0,284,286,
        7,3,0,0,285,284,1,0,0,0,286,287,1,0,0,0,287,285,1,0,0,0,287,288,
        1,0,0,0,288,80,1,0,0,0,8,0,85,259,265,271,273,282,287,0
    ]

class VecLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    UNARY_OP = 1
    AND = 2
    DECLAND = 3
    SIMDDOUBLEFMADD = 4
    MATMULKERNEL8X16 = 5
    MATMULKERNEL2X8 = 6
    GOTOKERNEL8X8 = 7
    MATMULKERNEL1D2X8 = 8
    CONVKERNEL = 9
    IF = 10
    FOR = 11
    WHERE = 12
    IN = 13
    RANGE = 14
    DEC = 15
    LPAREN = 16
    RPAREN = 17
    LBRACE = 18
    RBRACE = 19
    LBRACKET = 20
    RBRACKET = 21
    COMMA = 22
    LESSTHANOREQUAL = 23
    GREATERTHANOREQUAL = 24
    LESSTHAN = 25
    GREATERTHAN = 26
    ADDASSIGN = 27
    SUBASSIGN = 28
    MULASSIGN = 29
    PLUS = 30
    MINUS = 31
    MULTIPLY = 32
    MODULO = 33
    ASSIGN = 34
    SCOL = 35
    INT = 36
    ID = 37
    STRING = 38
    WS = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'&&'", "'and'", "'simdDoubleFmadd'", "'matmulKernel8x16'", 
            "'matmulKernel2x8'", "'gotoKernel8x8'", "'matmulKernel1D2x8'", 
            "'convKernel'", "'if'", "'for'", "'where'", "'in'", "'..'", 
            "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "'<='", "'>='", 
            "'<'", "'>'", "'+='", "'-='", "'*='", "'+'", "'-'", "'*'", "'%'", 
            "'='", "';'" ]

    symbolicNames = [ "<INVALID>",
            "UNARY_OP", "AND", "DECLAND", "SIMDDOUBLEFMADD", "MATMULKERNEL8X16", 
            "MATMULKERNEL2X8", "GOTOKERNEL8X8", "MATMULKERNEL1D2X8", "CONVKERNEL", 
            "IF", "FOR", "WHERE", "IN", "RANGE", "DEC", "LPAREN", "RPAREN", 
            "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "COMMA", "LESSTHANOREQUAL", 
            "GREATERTHANOREQUAL", "LESSTHAN", "GREATERTHAN", "ADDASSIGN", 
            "SUBASSIGN", "MULASSIGN", "PLUS", "MINUS", "MULTIPLY", "MODULO", 
            "ASSIGN", "SCOL", "INT", "ID", "STRING", "WS" ]

    ruleNames = [ "UNARY_OP", "AND", "DECLAND", "SIMDDOUBLEFMADD", "MATMULKERNEL8X16", 
                  "MATMULKERNEL2X8", "GOTOKERNEL8X8", "MATMULKERNEL1D2X8", 
                  "CONVKERNEL", "IF", "FOR", "WHERE", "IN", "RANGE", "DEC", 
                  "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", 
                  "COMMA", "LESSTHANOREQUAL", "GREATERTHANOREQUAL", "LESSTHAN", 
                  "GREATERTHAN", "ADDASSIGN", "SUBASSIGN", "MULASSIGN", 
                  "PLUS", "MINUS", "MULTIPLY", "MODULO", "ASSIGN", "SCOL", 
                  "INT", "ID", "STRING", "ESC", "WS" ]

    grammarFileName = "Vec.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


